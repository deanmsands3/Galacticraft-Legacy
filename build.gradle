import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import galacticraft.Merge

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'

defaultTasks 'build'

sourceSets {
    api {
        resources.srcDirs = []
    }
    main {
        resources {
            include '**/**'
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
    planets {
    	setupSourceSet(planets, 'planets') 
    }
    micdoodlecore {
    	setupSourceSet(micdoodlecore, 'micdoodlecore')
    }
}

def setupSourceSet(SourceSet sourceSet, String name) {
	sourceSet.compileClasspath += sourceSets.api.output
    sourceSet.compileClasspath += sourceSets.main.output
}

ext {
    versionProperties = ["version": mod_version, "mcversion": minecraft_version]
    jsonPatterns = ["**/*.mcmeta"]
}

def mainReplaceResources = createReplaceResourcesTask("main", sourceSets.main)
def planetsReplaceResources = createReplaceResourcesTask("planets", sourceSets.planets)
def micdoodlecoreReplaceResources = createReplaceResourcesTask("micdoodlecore", sourceSets.micdoodlecore)

def createReplaceResourcesTask(String output, SourceSet sourceSet) {
    return tasks.register("${output}ReplaceResources", Copy) {
        it.outputs.upToDateWhen { false }
        def modInfo = copySpec {
            from(sourceSet.resources) {
                include "mcmod.info"
                expand versionProperties
            }
        }
        //Copy it into the build dir
        it.with modInfo
        it.into "$buildDir/resources/${output}/"

        if (new File("$rootDir/out/production/Galacticraft.${output}/").exists()) {
            //Note: This copies it into the correct place, but it still doesn't have the IntelliJ
            // run work by default because of incorrect MOD_CLASSES getting generated.
            // probably related to us setting inheritOutputDirs
            copy {
                with modsToml
                into "$rootDir/out/production/Galacticraft.${output}/"
            }
        }
        //Note: If eclipse has its own non gradle based runClient as well and has issues due to
        // the missing mods.toml file, add a check for its path and copy into the correct spot here
    }
}

version = "${minecraft_version}-${mod_version}." + (System.env.BUILD_NUMBER ?: "homebaked")
group = 'micdoodle8.mods.galacticraft'
archivesBaseName = 'Galacticraft'
//java.toolchain.languageVersion = JavaLanguageVersion.of(8)

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {

	maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
		url "https://mod-buildcraft.com/maven/"
		content {
			includeGroup "com.mod-buildcraft"
		}
	}
	maven { 
		url "https://maven.ic2.player.to" 
		content {
			includeGroup "net.industrial-craft"
		}
	}
	maven {
		url 'https://dvs1.progwml6.com/files/maven'
		content {
			includeGroup "mezz.jei"
		}
	}
}

minecraft {

    mappings channel: 'stable', version: '39-1.12'
    //makeObfSourceJar = false
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            
            
            //The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                //Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                //Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            
            mods {
                galacticraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                galacticraftplanets.source((SourceSet) sourceSets.planets)
            }
            
            jvmArg '-Dfml.coreMods.load=tv.darkosto.sevpatches.core.SevPatchesLoadingPlugin'
        }

        server {
			workingDirectory project.file('run/server')
 
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            
            mods {
                galacticraft.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
                galacticraftplanets.source((SourceSet) sourceSets.planets)
            }
            
            jvmArg '-Dfml.coreMods.load=tv.darkosto.sevpatches.core.SevPatchesLoadingPlugin'
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'

    implementation fg.deobf("curse.maven:bop-7.0.1.2444-220318:2842510")
	implementation fg.deobf("curse.maven:mekanism-9.8.3.390-268560:2835176")
	implementation fg.deobf("curse.maven:ae2-rv6-stable-7-223794:2747063")
	implementation fg.deobf("curse.maven:redstoneflux-1.1.1-270789:2920436")
	implementation fg.deobf("curse.maven:actuallyadditions-r152-228404:3117927")
	implementation fg.deobf("curse.maven:playerapi-1.1-449521:3212872")

	implementation fg.deobf("com.mod-buildcraft:buildcraft-api:7.99.24.6")
	implementation "net.industrial-craft:industrialcraft-2:2.8.221-ex112:api"
	
	implementation "mezz.jei:jei_1.12.2:4.16.1.302:api"
	runtimeOnly "mezz.jei:jei_1.12.2:4.16.1.302"
	
	compileOnly "org.projectlombok:lombok:1.18.20"
	annotationProcessor "org.projectlombok:lombok:1.18.20"

	testCompileOnly "org.projectlombok:lombok:1.18.20"
	testAnnotationProcessor "org.projectlombok:lombok:1.18.20"
}

processResources { setupProcessResources(processResources, mainReplaceResources) }
processPlanetsResources { setupProcessResources(processPlanetsResources, planetsReplaceResources) }
processMicdoodlecoreResources { setupProcessResources(processMicdoodlecoreResources, micdoodlecoreReplaceResources) }

def setupProcessResources(ProcessResources process, TaskProvider<Task> replaceResources) {
    process.duplicatesStrategy(DuplicatesStrategy.FAIL)
    process.exclude('mcmod.info')
    process.from("${projectDir}") { include 'logo.png' }
    process.configure { finalizedBy(replaceResources) }
    process.doLast {
        fileTree(dir: process.getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

classes.configure { dependsOn(mainReplaceResources) }
planetsClasses.configure { dependsOn(planetsReplaceResources) }
micdoodlecoreClasses.configure { dependsOn(micdoodlecoreReplaceResources) }

def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "Team Galacticraft",
            "Specification-Version"   : "${project.mod_version}",
            "Implementation-Title"    : title,
            "Implementation-Version"  : "${project.mod_version}",
            "Implementation-Vendor"   : "Team Galacticraft",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

jar {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    from([sourceSets.api.output, sourceSets.main.output])
    manifest.attributes(getManifestAttributes("Galacticraft"))
    afterEvaluate { finalizedBy reobfJar }
}

task sourcesJar(type: Jar, dependsOn: [classes, apiClasses, planetsClasses, micdoodlecoreClasses]) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("sources")
    from(sourceSets.api.allJava, sourceSets.main.allJava, sourceSets.planets.allJava, sourceSets.micdoodlecore.allJava)
    manifest.attributes(getManifestAttributes("Galacticraft"))
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("api")
    from sourceSets.api.output
    manifest.attributes(getManifestAttributes("Galacticraft"))
    afterEvaluate { finalizedBy reobfApiJar }
}

task planetsJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveFileName.set("GalacticraftPlanets-${project.version}.jar")
    archiveClassifier.set("planets")
    from sourceSets.planets.output
    manifest.attributes(getManifestAttributes("GalacticraftPlanets"))
    afterEvaluate { finalizedBy reobfPlanetsJar }
}

task micdoodlecoreJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveFileName.set("MicdoodleCore-${project.version}.jar")
    archiveClassifier.set("miccore")
    from sourceSets.micdoodlecore.output
    manifest.attributes(getManifestAttributes("MicdoodleCore"))
    afterEvaluate { finalizedBy reobfMicdoodlecoreJar }
}

task allJar(type: Jar, dependsOn: [classes, apiClasses, planetsClasses, micdoodlecoreClasses]) {
    mustRunAfter(clean)
    afterEvaluate { finalizedBy reobfAllJar }
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("all")
    manifest.attributes(getManifestAttributes("GalacticraftAll"))

    doFirst {
        Merge.merge(project, sourceSets.main, sourceSets.planets, sourceSets.micdoodlecore)
    }

    from(sourceSets.api.output)
    List<String> baseExcludeData = Merge.getGeneralPathsToExclude(project)
    Closure excludeFromMain = Merge.createExcludeClosure(baseExcludeData)
    from(sourceSets.main.output, excludeFromMain)
    Closure excludeFromAll = Merge.createExcludeClosure(baseExcludeData, 'logo.png', 'pack.mcmeta')
    from(sourceSets.planets.output, excludeFromAll)
    from(sourceSets.micdoodlecore.output, excludeFromAll)

    Merge.getGeneratedClosures(versionProperties).each { closure -> from("$buildDir/generated", closure) }
}

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
})

artifacts {
    archives apiJar
    archives jar
    archives planetsJar
    archives micdoodlecoreJar
    archives allJar
    archives sourcesJar
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
    planetsJar { classpath.from(sourceSets.planets.compileClasspath) }
    micdoodlecoreJar { classpath.from(sourceSets.micdoodlecore.compileClasspath) }
    allJar {}
}

void minimizePNGFile(File file) {
    long size = file.length()
    exec {
        executable "optipng"
        args "-q", "-o7", "-zm1-9", "-strip", "all", file
    }
    long newSize = file.length()
    if (newSize < size) {
        System.out.format("Reduced File size of %s from %d bytes to %d bytes (reduced by %.2f%%)\n",
                file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0)
    }
}

task optimizePng {
    def pngPatterns = ["**/*.png"]
    doLast {
        //Ensure the logo is minimized (we add this file to each jar)
        minimizePNGFile(file("${projectDir}/logo.png"))
        //Minimize any PNGs in the source sets
        def sourceSets = [sourceSets.main, sourceSets.planets]
        for (def sourceSet : sourceSets) {
            for (dir in sourceSet.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { minimizePNGFile(it) }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
